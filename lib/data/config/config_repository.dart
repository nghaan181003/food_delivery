import 'package:flutter/material.dart';
import 'package:food_delivery_h2d/data/response/api_response.dart';
import 'package:food_delivery_h2d/data/response/status.dart';
import 'package:food_delivery_h2d/features/admin/config/models/fee_config_model.dart';
import 'package:food_delivery_h2d/utils/http/http_client.dart';
import 'package:get/get.dart';

class ConfigRepository extends GetxController {
  static ConfigRepository get instance => Get.find();

  Future<ApiResponse<List<Config>>> getConfigs() async {
    try {
      final res = await HttpHelper.get("config");
      debugPrint("üü¢ Ph·∫£n h·ªìi getConfigs: $res");
      final list = (res["data"] as List)
          .map((config) => Config.fromJson(config))
          .toList();
      return ApiResponse.completed(
          list, res["message"] ?? "L·∫•y danh s√°ch c·∫•u h√¨nh th√†nh c√¥ng");
    } catch (e) {
      debugPrint("üî¥ L·ªói getConfigs: $e");
      debugPrint("üî¥ Ph·∫£n h·ªìi th√¥: ${e.toString()}");
      String errorMessage = "Kh√¥ng th·ªÉ l·∫•y danh s√°ch c·∫•u h√¨nh: $e";
      if (e.toString().contains('SyntaxError: Unexpected token')) {
        errorMessage =
            'L·ªói server: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON. Vui l√≤ng ki·ªÉm tra server ho·∫∑c URL API.';
      }
      return ApiResponse.error(errorMessage);
    }
  }

  Future<ApiResponse<Config>> getDeliveryFeeConfig() async {
    try {
      final res = await getConfigs();
      if (res.status == Status.OK) {
        final deliveryFeeConfig = res.data!
            .firstWhereOrNull((config) => config.type == 'DELIVERY_FEE');
        if (deliveryFeeConfig == null) {
          return ApiResponse.error("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn");
        }
        return ApiResponse.completed(
            deliveryFeeConfig, "L·∫•y c·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn th√†nh c√¥ng");
      } else {
        return ApiResponse.error(res.message!);
      }
    } catch (e) {
      debugPrint("üî¥ L·ªói getDeliveryFeeConfig: $e");
      String errorMessage = "Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn: $e";
      if (e.toString().contains('SyntaxError: Unexpected token')) {
        errorMessage =
            'L·ªói server: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON. Vui l√≤ng ki·ªÉm tra server ho·∫∑c URL API.';
      }
      return ApiResponse.error(errorMessage);
    }
  }

  Future<ApiResponse<Config>> addConfig(Config newConfig) async {
    try {
      debugPrint("üü¢ Th√™m c·∫•u h√¨nh m·ªõi: ${newConfig.toJson()}");
      final res = await HttpHelper.post("config", newConfig.toJson());
      debugPrint("üü¢ Ph·∫£n h·ªìi addConfig: $res");
      return ApiResponse.completed(Config.fromJson(res["data"]),
          res["message"] ?? "Th√™m c·∫•u h√¨nh ${newConfig.type} th√†nh c√¥ng");
    } catch (e) {
      debugPrint("üî¥ L·ªói addConfig: $e");
      String errorMessage = "Kh√¥ng th·ªÉ th√™m c·∫•u h√¨nh ${newConfig.type}: $e";
      if (e.toString().contains('ƒê√£ t·ªìn t·∫°i c·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn')) {
        errorMessage =
            'ƒê√£ t·ªìn t·∫°i c·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn. Vui l√≤ng c·∫≠p nh·∫≠t thay v√¨ t·∫°o m·ªõi.';
      }
      return ApiResponse.error(errorMessage);
    }
  }

  Future<ApiResponse<Config>> updateConfig(Config config) async {
    try {
      debugPrint("üü¢ C·∫≠p nh·∫≠t c·∫•u h√¨nh: ${config.toJson()}");
      final res = await HttpHelper.put("config/${config.id}", config.toJson());
      debugPrint("üü¢ Ph·∫£n h·ªìi updateConfig: $res");
      return ApiResponse.completed(Config.fromJson(res["data"]),
          res["message"] ?? "C·∫≠p nh·∫≠t c·∫•u h√¨nh ${config.type} th√†nh c√¥ng");
    } catch (e) {
      debugPrint("üî¥ L·ªói updateConfig: $e");
      return ApiResponse.error(
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c·∫•u h√¨nh ${config.type}: $e");
    }
  }

  Future<ApiResponse<String>> removeConfig(String configId) async {
    try {
      debugPrint("üü¢ X√≥a c·∫•u h√¨nh ID: $configId");
      final res = await HttpHelper.delete("config/$configId");
      debugPrint("üü¢ Ph·∫£n h·ªìi removeConfig: $res");
      return ApiResponse.completed(res["data"]?["_id"] ?? configId,
          res["message"] ?? "X√≥a c·∫•u h√¨nh th√†nh c√¥ng");
    } catch (e) {
      debugPrint("üî¥ L·ªói removeConfig: $e");
      return ApiResponse.error("Kh√¥ng th·ªÉ x√≥a c·∫•u h√¨nh: $e");
    }
  }
}
